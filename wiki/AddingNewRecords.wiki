#summary Implementation of add functionality
#labels Phase-Implementation

= Introduction =

!DataTables Editable plugin handles adding new records in the table. When user wants to add a new record plugin opens "Add new record" dialog where user can populate details of the new record. When user submit changes, plugin created one AJAX request to the server-side page and if update is successful, a record will be added in the table.

= Client side implementation =

== Add new record form ==

To add a new record, a custom form that will be used for entering details of the new record should be added. If id of the form is not explicitly specified in plugin initialization id of the add new record form must be "formAddNewRow". Example of the form is:

{{{
<form id="formAddNewRow" action="#" title="Add new company">
    <input type="hidden" id="id" name="id" value="-1" rel="0" />
    <label for="name">Name</label><input type="text" name="name" id="name" class="required" rel="1" />
    <br />
    <label for="name">Address</label><input type="text" name="address" id="address" rel="2" />
    <br />
    <label for="name">Postcode</label><input type="text" name="postcode" id="postcode"/>
    <br />
    <label for="name">Town</label><input type="text" name="town" id="town" rel="3" />
    <br />
    <label for="name">Country</label><select name="country" id="country">
                                        <option value="1">Serbia</option>
                                        <option value="2">France</option>
                                        <option value="3">Italy</option>
                                        </select>   
    <br />         
</form>

}}}

Confirmation and cancel button do not need to be added in the form - they will be auto-generated by the plugin. When user press confirmation button AJAX request will be sent-to the server-side page, with all values user entered in the form. 
*Make sure that server-side page accepts the same parameters you entered as elements of the form*

Form can have more elements that a table columns. To map values in the form with columns in the table each element that matches the table columns must have a rel attribute. Rel attributes of the elements must match the column positions in the table. If the records is successfully added on the server-side, plugin will take all elements that have rel attribute and place them in the table using the rel attributes as a column positions. In the example above id, name, address and country will be added as cells 0, 1, 2, and 3 in the original table.


== Add new record buttons ==

The button that will be used for opening add new record form should be added to the page. Any style/class can be added to the button - only requirement is that id of the button should be btnAddNewRow. Example of the button is:

{{{
<button id="btnAddNewRow">Add</button>
}}}

Confirm and delete buttons in the popup dialog are auto-generated and all necessary event are attached to these buttons. However, they can be customized too. If plugin finds any buttons with ids "btnAddNewRowOk" and "btnAddNewRowCancel" it will not auto-generate buttons and it will attach event handlers to the existing buttons. This could be handy if buttons should be placed on the top of the dialog or some custom text or class should be added to the buttons. Also, ids of buttons can be changed using the following initialization code:

{{{
$('#myDataTable').dataTable().makeEditable({
            		sAddNewRowOkButtonId: "btnAddNewCompanyOk",
            		sAddNewRowCancelButtonId: "btnAddNewCompanyCancel"
                }); 

}}}

This initialization code instructs the plugin to find confirm and delete buttons by these ids instead of the default values. This might be useful if you have more than one add new record form with different buttons on the same page, and each of these pairs of buttons should have different ids.

== Setting server-side page ==

In the plugin initialization call should be set parameter sAddURL used to define what server-side page should be used for submitting the add AJAX request. Example of initialization code is shown below:

{{{
$('#myDataTable').dataTable().makeEditable({
                    sAddURL: "/Home/AddData.php"
                }); 
}}}

= Server side implementation =


Server side page that Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages

=Customization=